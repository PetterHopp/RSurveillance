install.packages("binom")
library("binom", lib.loc="~/R/win-library/3.1")
example(binom.confint)
binom.agresti(25, 200)[1,1:6]
binom.agresti<- function(x, n, conf=0.95) {
# agresti-coull
tails<- 2
z.conf<- qnorm(1 - (1 - conf)/tails, 0, 1)
n.ac<- n + z.conf^2
x.ac<- x + z.conf^2/2
p.ac<- x.ac/n.ac
q.ac<- 1 - p.ac
lc<- p.ac - z.conf*(p.ac*q.ac)^0.5 * n.ac^-0.5
uc<- p.ac + z.conf*(p.ac*q.ac)^0.5 * n.ac^-0.5
return(data.frame(x=x, n=n, proportion=x/n, lower=lc,
upper=uc, conf.level=conf, method="agresti-coull"))
}
binom.agresti(25, 200)[1,1:6]
its<- 10
risk.cat<- 3
rr<- matrix(0, nrow=its, ncol=risk.cat)
rr[,1]<- mcd::rpert(its, 5,10,20)
rr[,2]<- mcd::rpert(its, 2,3,5)
rr[,3]<- 1
rr[,1]<- mc2d::rpert(its, 5,10,20)
rr[,2]<- mc2d::rpert(its, 2,3,5)
rr[,3]<- 1
View(rr)
tmp<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
ppr<- c(0.05, 0.2, 0.75)
tmp<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
View(tmp)
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
sum.prod
ar<- rr
for (r in 1:ncol(rr)) ar<- rr[,r]/sum.prod[r]
ar<- rr
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
View(ar)
adj.risk.sim<- function(rr, ppr) {
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
return(ar)
}
adj.risk.sim(rr, ppr)
adj.risk.sim(c(5, 3, 1), c(0.1, 0.1, 0.8))
adj.risk.sim(matrix(c(5, 3, 1), nrow=1), matrix(c(0.1, 0.1, 0.8), nrow=1))
rr<- matrix(c(5, 3, 1), nrow=1)
ppr<-matrix(c(0.1, 0.1, 0.8), nrow=1)
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
tmp
ar
rr
sum.prod
sum.prod[r]
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
ar
adj.risk.sim(rr, ppr)
##' its<- 10
its<- 10
risk.cat<- 3
rr<- matrix(0, nrow=its, ncol=risk.cat)
rr[,1]<- mc2d::rpert(its, 5,10,20)
rr[,2]<- mc2d::rpert(its, 2,3,5)
rr[,3]<- 1
ppr<- c(0.05, 0.2, 0.75)
adj.risk.sim<- function(rr, ppr) {
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
return(ar)
}
##' adj.risk.sim(rr, ppr)
adj.risk.sim(rr, ppr)
adj.risk.sim(matrix(c(5, 3, 1), nrow=1), matrix(c(0.1, 0.1, 0.8), nrow=1))
adj.risk.sim(matrix(c(10, 5, 1), nrow=1), matrix(c(0.05, 0.25, 0.7), nrow=1))
expected_result <- c(4.081633, 2.040816, 0.4081633)
observed_result <- adj.risk.sim(matrix(c(10, 5, 1), nrow=1), matrix(c(0.05, 0.25, 0.7), nrow=1))
stopifnot(all(abs(observed_result - expected_result) < tol))
tol = 1e-5
stopifnot(all(abs(observed_result - expected_result) < tol))
abs(observed_result - expected_result)
all(abs(observed_result - expected_result) < tol)
rr[,r]
sum.prod
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
rr
