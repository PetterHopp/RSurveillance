install.packages("binom")
library("binom", lib.loc="~/R/win-library/3.1")
example(binom.confint)
binom.agresti(25, 200)[1,1:6]
binom.agresti<- function(x, n, conf=0.95) {
# agresti-coull
tails<- 2
z.conf<- qnorm(1 - (1 - conf)/tails, 0, 1)
n.ac<- n + z.conf^2
x.ac<- x + z.conf^2/2
p.ac<- x.ac/n.ac
q.ac<- 1 - p.ac
lc<- p.ac - z.conf*(p.ac*q.ac)^0.5 * n.ac^-0.5
uc<- p.ac + z.conf*(p.ac*q.ac)^0.5 * n.ac^-0.5
return(data.frame(x=x, n=n, proportion=x/n, lower=lc,
upper=uc, conf.level=conf, method="agresti-coull"))
}
binom.agresti(25, 200)[1,1:6]
its<- 10
risk.cat<- 3
rr<- matrix(0, nrow=its, ncol=risk.cat)
rr[,1]<- mcd::rpert(its, 5,10,20)
rr[,2]<- mcd::rpert(its, 2,3,5)
rr[,3]<- 1
rr[,1]<- mc2d::rpert(its, 5,10,20)
rr[,2]<- mc2d::rpert(its, 2,3,5)
rr[,3]<- 1
View(rr)
tmp<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
ppr<- c(0.05, 0.2, 0.75)
tmp<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
View(tmp)
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
sum.prod
ar<- rr
for (r in 1:ncol(rr)) ar<- rr[,r]/sum.prod[r]
ar<- rr
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
View(ar)
adj.risk.sim<- function(rr, ppr) {
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
return(ar)
}
adj.risk.sim(rr, ppr)
adj.risk.sim(c(5, 3, 1), c(0.1, 0.1, 0.8))
adj.risk.sim(matrix(c(5, 3, 1), nrow=1), matrix(c(0.1, 0.1, 0.8), nrow=1))
rr<- matrix(c(5, 3, 1), nrow=1)
ppr<-matrix(c(0.1, 0.1, 0.8), nrow=1)
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod[r]
tmp
ar
rr
sum.prod
sum.prod[r]
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
ar
adj.risk.sim(rr, ppr)
##' its<- 10
its<- 10
risk.cat<- 3
rr<- matrix(0, nrow=its, ncol=risk.cat)
rr[,1]<- mc2d::rpert(its, 5,10,20)
rr[,2]<- mc2d::rpert(its, 2,3,5)
rr[,3]<- 1
ppr<- c(0.05, 0.2, 0.75)
adj.risk.sim<- function(rr, ppr) {
tmp<- rr
ar<- rr
for (r in 1:ncol(rr)) tmp[,r]<- rr[,r]*ppr[r]
sum.prod<- apply(tmp, FUN = sum, MARGIN = 1)
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
return(ar)
}
##' adj.risk.sim(rr, ppr)
adj.risk.sim(rr, ppr)
adj.risk.sim(matrix(c(5, 3, 1), nrow=1), matrix(c(0.1, 0.1, 0.8), nrow=1))
adj.risk.sim(matrix(c(10, 5, 1), nrow=1), matrix(c(0.05, 0.25, 0.7), nrow=1))
expected_result <- c(4.081633, 2.040816, 0.4081633)
observed_result <- adj.risk.sim(matrix(c(10, 5, 1), nrow=1), matrix(c(0.05, 0.25, 0.7), nrow=1))
stopifnot(all(abs(observed_result - expected_result) < tol))
tol = 1e-5
stopifnot(all(abs(observed_result - expected_result) < tol))
abs(observed_result - expected_result)
all(abs(observed_result - expected_result) < tol)
rr[,r]
sum.prod
for (r in 1:ncol(rr)) ar[,r]<- rr[,r]/sum.prod
rr
n.rb.2stage.1<- function(rr, ppr, spr,pstar.c, pstar.u, se=1, sep.c=0.95, sep.sys=0.95) {
n.u<- n.binom(sep.c, pstar.u, se)
n<- n.rb(pstar.c, rr, ppr, spr, sep.c, sep.sys)
n$units<- n.u
n$risk.units<- n$n*n.u
n$total.units<- n$total*n.u
return(n)
}
rr<- c(5,3,1)
ppr<- c(0.1, 0.2, 0.7)
spr<- c(0.4, 0.4, 0.2)
n.rb.2stage.1(rr, ppr, spr, pstar.c=0.01, pstar.u=0.1, se =0.9, sep.c=0.8, sep.sys=0.95)
library("RSurveillance", lib.loc="~/R/win-library/3.1")
n.rb.2stage.1(rr, ppr, spr, pstar.c=0.01, pstar.u=0.1, se =0.9, sep.c=0.8, sep.sys=0.95)
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3),0.05, 0.1, 0.9, 0.95, 0.99)
tol = 1e-5
expected_result <- c(39, 16)
observed_result <- n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3),0.05, 0.1, 0.9, 0.95, 0.99)[[1]]
stopifnot(all(abs(observed_result - expected_result) < tol))
observed_result - expected_result
n.rb.2stage.2<- function(rr.c, ppr.c, spr.c, pstar.c,
rr.u=1, ppr.u=1, spr.u=1, pstar.u,
se=1, sep.c=0.95, sep.sys=0.95) {
n.u<- n.rb(pstar.u, rr.u, ppr.u, spr.u, se, sep.c)
n.c<- n.rb(pstar.c, rr.c, ppr.c, spr.c, sep.c, sep.sys)
n<- list(clusters = n.c, units = n.u)
return(n)
}
rr.c<- c(5,3,1)
ppr.c<- c(0.1, 0.2, 0.7)
spr.c<- c(0.4, 0.4, 0.2)
pstar.c<- 0.01
rr.u<- c(4,1)
ppr.u<- c(0.1, 0.9)
spr.u<- c(1, 0)
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)
n.rb.2stage.2(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)
expected_result <- c(39, 16)
observed_result <- n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)
stopifnot(all(abs(observed_result - expected_result) < tol))
observed_result <- n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]][[1]]
stopifnot(all(abs(observed_result - expected_result) < tol))
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]][[1]]
observed_result <- n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]]
observed_result
tmp<- n.rb.2stage.2(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)
dim(tmp)
names(tmp)
tmp[[8]]
tmp[[1]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[8]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[2]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[3]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[4]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[5]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[6]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[7]]
n.rb.2stage.1(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)[[8]]
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)[[1]][[1]]
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)[[2]][[1]]
n.rb.2stage.2(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]][[1]]
expected_result <- c(39, 16)
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)
observed_result <-  n.rb.2stage.2(c(3,1), c(0.2,0.8), c(0.7,0.3), pstar.c=0.05, pstar.u=0.1, se=0.9, sep.c=0.95, sep.sys=0.99)[[1]][[1]]
stopifnot(all(abs(observed_result - expected_result) < tol))
n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)
observed_result <-  n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)[[1]][[1]]
observed_result
expected_result <- c(64, 64, 30)
rr.c<- c(5,3,1)
ppr.c<- c(0.1, 0.2, 0.7)
spr.c<- c(0.4, 0.4, 0.2)
rr.u<- c(4,1)
ppr.u<- c(0.1, 0.9)
spr.u<- c(1, 0)
observed_result <-  n.rb.2stage.2(rr.c, ppr.c, spr.c, pstar.c=0.02, rr.u, ppr.u, spr.u, 0.1, se=0.9, sep.c=0.5, sep.sys=0.95)[[1]][[1]]
stopifnot(all(abs(observed_result - expected_result) < tol))
all(abs(observed_result - expected_result) < tol)
observed_result - expected_result
prod(0.1)
sep.passive(step.p, 0.98, 0.9, 1000, 5, 0.01)
sep.passive<- function(step.p, p.inf.u, se, N, n, pstar.c) {
sep.c<- prod(step.p) * (1 - (1 - p.inf * se)^n)
sep.sys<- 1 - (1 - sep.c)^(pstar.c*N)
return(list(sep.c, sep.sys))
}
step.p<- c(0.1, 0.2, 0.9, 0.99)
sep.passive(step.p, 0.98, 0.9, 1000, 5, 0.01)
sep.passive<- function(step.p, p.inf.u, se, N, n, pstar.c) {
sep.c<- prod(step.p) * (1 - (1 - p.inf.u * se)^n)
sep.sys<- 1 - (1 - sep.c)^(pstar.c*N)
return(list(sep.c, sep.sys))
}
step.p<- c(0.1, 0.2, 0.9, 0.99)
sep.passive(step.p, 0.98, 0.9, 1000, 5, 0.01)
prod(step.p)
sep.passive<- function(step.p, p.inf.u, se, N, n, pstar.c) {
sep.c<- prod(step.p) * (1 - (1 - p.inf.u * se)^n)
sep.sys<- 1 - (1 - sep.c)^(pstar.c*N)
return(list(sep.c, sep.sys))
}
sep.passive(c(0.1, 0.2, 0.9, 0.99), 0.98, 0.9, 1000, 5, 0.01)
sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)
sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)[[1]]
expected_result <- c(0.04702392, 0.3822397)
observed_result <-  sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)
stopifnot(all(abs(observed_result - expected_result) < tol))
observed_result
expected_result
expected_result <- list(0.04702392, 0.3822397)
observed_result <-  sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)
stopifnot(all(abs(observed_result - expected_result) < tol))
expected_result
observed_result
observed_result - expected_result
expected_result <- c(0.04702392, 0.3822397)
observed_result <-  as.vector(sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01))
stopifnot(all(abs(observed_result - expected_result) < tol))
observed_result
as.vector(sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01))
vector(sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01))
c(sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)[[1]], sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)[[2]])
observed_result <-  c(sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)[[1]], sep.passive(c(0.1, 0.5, 0.95, 0.99), 0.98, 0.9, 1000, 5, 0.01)[[2]])
stopifnot(all(abs(observed_result - expected_result) < tol))
all(abs(observed_result - expected_result) < tol)
